// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  name          String
  age           Int
  email         String @unique
  role          Role   @default(BASIC)
  // preferences    Json
  writtenPosts  Post[] @relation("WrittenPostsOrWhatever") // Modifiers: [] or ? only
  favoritePosts Post[] @relation("FavPost") // Modifiers: [] or ? only

  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  @@unique([age, name])
  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPostsOrWhatever", fields: [authorId], references: [id]) // fields says what fields in this model have the relation and reference, what is referenced attribute
  authorId      String
  favotiredBy   User?      @relation("FavPost", fields: [favotiredById], references: [id]) // fields says what fields in this model have the relation and reference, what is referenced attribute
  favotiredById String?
  categories    Category[] // Enough for the many-to-many relation

  // @@id([title, authorId])
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
}
